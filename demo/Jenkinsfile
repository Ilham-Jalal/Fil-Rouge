pipeline {
    agent any

    tools {
        maven 'mvn'
    }

    environment {
        DOCKER_HUB_REPO = 'ilhamjalal123/occasion'
        DOCKER_IMAGE = 'occasion-demo'
        DOCKER_COMPOSE_FILE = 'docker-compose.yml'
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
        SONARQUBE = 'occa-sonnar-server'
        SONARTOKEN = credentials('occa-token')
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/Ilham-Jalal/Fil-Rouge.git'
            }
        }

        stage('Build and Test') {
            steps {
                dir('demo') {
                    bat 'mvn clean install'
                    bat 'mvn test'
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                dir('demo') {
                    withSonarQubeEnv(SONARQUBE) {
                        bat "mvn sonar:sonar -Dsonar.token=${SONARTOKEN}"
                    }
                }
            }
        }
//
//         stage('Quality Gate Check') {
//             steps {
//                 timeout(time: 5, unit: 'MINUTES') {
//                     waitForQualityGate abortPipeline: true
//                 }
//             }
//         }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('demo') {
                        bat "docker build -t ${DOCKER_IMAGE} ."
                    }
                }
            }
        }

        stage('Tag and Push Docker Image') {
            steps {
                script {
                    docker.withRegistry("https://index.docker.io/v1/", DOCKER_CREDENTIALS_ID) {
                        def imageName = "${DOCKER_HUB_REPO}:${DOCKER_IMAGE}"
                        bat """
                            docker tag ${DOCKER_IMAGE} ${imageName}
                            docker push ${imageName}
                        """
                    }
                }
            }
        }

        stage('Run Docker Compose') {
            steps {
                script {
                    dir('demo') {
                        bat 'docker-compose up -d'
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
